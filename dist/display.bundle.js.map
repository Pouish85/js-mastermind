{"version":3,"file":"display.bundle.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACO,SAASA,oBAAoB,CAACC,UAAU,EAAE;EAC7C,IAAIC,gBAAgB,GAAGD,UAAU,CAACE,GAAG,CAACC,KAAK,IACtC;AACT,qCAAqCA,KAAK,CAACC,IAAK;AAChD,SAAS,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACXC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,SAAS,GAAGP,gBAAgB;AACxE;;AAEA;AACO,SAASQ,oBAAoB,CAACC,QAAQ,EAAEC,cAAc,EAAE;EAC3D,IAAIC,CAAC;EACL,IAAIC,UAAU,GAAG,EAAE;EACnB,KAAID,CAAC,GAAGD,cAAc,EAAEC,CAAC,IAAIF,QAAQ,EAAEE,CAAC,EAAE,EAAE;IACxCC,UAAU,CAACC,IAAI,CAACF,CAAC,CAAC;EACtB;EAEA,IAAIG,eAAe,GAAGF,UAAU,CAACX,GAAG,CAACc,KAAK,IACrC;AACT,6BAA6BA,KAAM;AACnC,oDAAoDA,KAAM;AAC1D;AACA;AACA;AACA;AACA,qCAAqCA,KAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,CAAC,CAACX,IAAI,CAAC,EAAE,CAAC;EACXC,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC,CAACC,SAAS,GAAGO,eAAe;AAChF;;AAEA;AACO,SAASE,iBAAiB,CAACjB,UAAU,EAAEkB,qBAAqB,EAAE;EACjE;EACA,MAAMC,MAAM,GAAGnB,UAAU,CAACE,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EAClD,MAAMgB,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,qBAAqB,EAAEN,CAAC,EAAE,EAAE;IAC5C,IAAIS,eAAe,GAAGF,MAAM,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,MAAM,CAACM,MAAM,CAAC,CAAC;IACvEL,YAAY,CAACN,IAAI,CAACO,eAAe,CAAC;EACtC;EACA;EACA,IAAIK,qBAAqB,GAAGN,YAAY,CAAClB,GAAG,CAAC,MACxC;AACT;AACA,SAAS,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;EACXC,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC,CAACC,SAAS,GAAGkB,qBAAqB;AACtF;;AAEA;AACO,SAASC,kBAAkB,CAAChB,cAAc,EAAEO,qBAAqB,EAAE;EACtE,IAAIU,mBAAmB,GAAG,EAAE;EAC5B,IAAIC,sBAAsB,GAAG,gEAAgE;EAC7F,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIM,qBAAqB,EAAEN,CAAC,EAAE,EAAE;IAC7CgB,mBAAmB,CAACd,IAAI,CAACF,CAAC,CAAC;EAC/B;EACA,IAAIkB,wBAAwB,GAAGF,mBAAmB,CAAC1B,GAAG,CAACc,KAAK,IAAI;AACpE,4BAA4BA,KAAM;AAClC,KAAK,CAAC,CAACX,IAAI,CAAC,EAAE,CAAC;EACX,IAAI0B,kBAAkB,GAAEF,sBAAsB,CAACG,MAAM,CAACF,wBAAwB,CAAC;EAC/ExB,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAACC,SAAS,GAAGuB,kBAAkB;AAC5E,C","sources":["webpack://js-mastermind/webpack/bootstrap","webpack://js-mastermind/webpack/runtime/define property getters","webpack://js-mastermind/webpack/runtime/hasOwnProperty shorthand","webpack://js-mastermind/webpack/runtime/make namespace object","webpack://js-mastermind/./src/assets/js/display.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//function for generating and displaying colors buttons\nexport function colorsButtonCreation(colorsList) {\n    let colorsButtonHTML = colorsList.map(color =>\n        `\n        <button class=\"colors\" id=\"${color.name}\"></button>\n        `).join('');\n        document.getElementById('colorBtn').innerHTML = colorsButtonHTML;\n}\n\n//function for generating and displaying all the attempts rows\nexport function attemptsRowsCreation(maxTries, currentAttempt) {\n    let i;\n    let arrayTries = [];\n    for(i = currentAttempt; i <= maxTries; i++) {\n        arrayTries.push(i)\n    }\n\n    let attemptsRowHTML = arrayTries.map(value =>\n        `\n        <div class=\"attempt${value} row\">\n                <button class=\"number\" id=\"black\">${value}</button>\n                <buton class=\"colors one\" id=\"white\"></buton>\n                <buton class=\"colors two\" id=\"white\"></buton>\n                <buton class=\"colors three\" id=\"white\"></buton>\n                <buton class=\"colors four\" id=\"white\"></buton>\n                <div class=\"results${value} square\">\n                    <button class=\"resultsColors one\" id=\"\"></button>\n                    <button class=\"resultsColors two\" id=\"\"></button>\n                    <button class=\"resultsColors three\" id=\"\"></button>\n                    <button class=\"resultsColors four\" id=\"\"></button>\n                </div>\n            </div>\n        \n        `).join('');\n        document.getElementById(\"attemptsContainer\").innerHTML = attemptsRowHTML;\n}\n\n//function for gererating and displaying random combination row\nexport function hiddenCombination(colorsList, hiddenComnationLength) {\n    //combination creation\n    const colors = colorsList.map(color => color.name);\n    const randomChoice = [];\n    for (let i = 0; i < hiddenComnationLength; i++) {\n        let randomOneChoice = colors[Math.floor(Math.random() * colors.length)];\n        randomChoice.push(randomOneChoice);\n    }\n    //hidden combination row display without colors info for prevent cheating\n    let hiddenCombinationHTML = randomChoice.map(() =>\n        `\n        <button class=\"colors place1\" id=\"black\"></button>\n        `).join('');\n        document.getElementById('hiddenCombination').innerHTML = hiddenCombinationHTML;\n} \n\n//function for generating and displaying currentAttempt row\nexport function currentAttemptDisp(currentAttempt, hiddenComnationLength) {\n    let currentAttemptArray = [];\n    let currentAttemptTextHTML = '<div class=\"currentText\" id=\"black\">Combinaison en cours</div>'\n    for (let i = 1; i <= hiddenComnationLength; i++) {\n        currentAttemptArray.push(i);\n    }\n    let currentAttemptColorsHTML = currentAttemptArray.map(value =>`\n    <button class=\"colors ${value}\" id=\"white\"></button>\n    `).join('');\n    let currentAttemptHTML= currentAttemptTextHTML.concat(currentAttemptColorsHTML);\n    document.getElementById('currentAttempt').innerHTML = currentAttemptHTML;\n}"],"names":["colorsButtonCreation","colorsList","colorsButtonHTML","map","color","name","join","document","getElementById","innerHTML","attemptsRowsCreation","maxTries","currentAttempt","i","arrayTries","push","attemptsRowHTML","value","hiddenCombination","hiddenComnationLength","colors","randomChoice","randomOneChoice","Math","floor","random","length","hiddenCombinationHTML","currentAttemptDisp","currentAttemptArray","currentAttemptTextHTML","currentAttemptColorsHTML","currentAttemptHTML","concat"],"sourceRoot":""}