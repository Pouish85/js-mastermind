{"version":3,"file":"display.bundle.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACLO,SAASA,aAAa,CAAEC,UAAU,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,uBAAuB,EAAE;EAC1F;EACA,SAASC,oBAAoB,CAACJ,UAAU,EAAE;IACtC,IAAIK,gBAAgB,GAAGL,UAAU,CAACM,GAAG,CAACC,KAAK,IACtC;AACb;AACA;AACA,kBAAkBA,KAAK,CAACC,IAAK;AAC7B;AACA,aAAa,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IACXC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,SAAS,GAAGP,gBAAgB;EACxE;;EAEA;EACA,SAASQ,oBAAoB,CAACZ,QAAQ,EAAEC,cAAc,EAAE;IACpD,IAAIY,CAAC;IACL,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAID,CAAC,GAAGZ,cAAc,EAAEY,CAAC,IAAIb,QAAQ,EAAEa,CAAC,EAAE,EAAE;MACxCC,UAAU,CAACC,IAAI,CAACF,CAAC,CAAC;IACtB;IAEA,IAAIG,eAAe,GAAGF,UAAU,CAACT,GAAG,CAACY,KAAK,IACrC;AACb,iCAAiCA,KAAM;AACvC,wDAAwDA,KAAM;AAC9D;AACA;AACA;AACA;AACA,yCAAyCA,KAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC;IACXC,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC,CAACC,SAAS,GAAGK,eAAe;EAChF;;EAEA;EACA,SAASE,oBAAoB,CAAChB,uBAAuB,EAAE;IAEnD,IAAIiB,sBAAsB,GAAG,EAAE;IAC/B,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIX,uBAAuB,EAAEW,CAAC,EAAE,EAAE;MAC/CM,sBAAsB,CAACJ,IAAI,CAACF,CAAC,CAAC;IAClC;IACA,IAAIO,qBAAqB,GAAGD,sBAAsB,CAACd,GAAG,CAACgB,GAAG,IACrD;AACb,yCAAyCA,GAAI;AAC7C,aAAa,CAAC,CAACb,IAAI,CAAC,EAAE,CAAC;IACXC,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC,CAACC,SAAS,GAAGS,qBAAqB;EACtF;;EAEA;EACA,SAASE,kBAAkB,CAACrB,cAAc,EAAEC,uBAAuB,EAAE;IACjE,IAAIqB,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,sBAAsB,GAAG,gEAAgE;IAC7F,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIX,uBAAuB,EAAEW,CAAC,EAAE,EAAE;MAC/CU,mBAAmB,CAACR,IAAI,CAACF,CAAC,CAAC;IAC/B;IACA,IAAIY,wBAAwB,GAAGF,mBAAmB,CAAClB,GAAG,CAACY,KAAK,IAAI;AACxE;AACA,SAAS,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC;IACX,IAAIkB,kBAAkB,GAAEF,sBAAsB,CAACG,MAAM,CAACF,wBAAwB,CAAC;IAC/EhB,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAACC,SAAS,GAAGe,kBAAkB;EAC5E;EACAvB,oBAAoB,CAACJ,UAAU,CAAC;EAChCa,oBAAoB,CAACZ,QAAQ,EAAEC,cAAc,CAAC;EAC9CiB,oBAAoB,CAAChB,uBAAuB,CAAC;EAC7CoB,kBAAkB,CAACrB,cAAc,EAAEC,uBAAuB,CAAC;AAC/D,C","sources":["webpack://js-mastermind/webpack/bootstrap","webpack://js-mastermind/webpack/runtime/define property getters","webpack://js-mastermind/webpack/runtime/hasOwnProperty shorthand","webpack://js-mastermind/webpack/runtime/make namespace object","webpack://js-mastermind/./src/assets/js/display.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nexport function boardCreation (colorsList, maxTries, currentAttempt, hiddenCombinationLength) {\n    // //function for generating and displaying colors buttons\n    function colorsButtonCreation(colorsList) {\n        let colorsButtonHTML = colorsList.map(color =>\n            `\n            <button \n            class=\"colors color-btn\" \n            id=\"${color.name}\">\n            </button>\n            `).join('');\n            document.getElementById('colorBtn').innerHTML = colorsButtonHTML;\n    }\n\n    //function for generating and displaying all the attempts rows\n    function attemptsRowsCreation(maxTries, currentAttempt) {\n        let i;\n        let arrayTries = [];\n        for(i = currentAttempt; i <= maxTries; i++) {\n            arrayTries.push(i)\n        }\n\n        let attemptsRowHTML = arrayTries.map(value =>\n            `\n            <div class=\"attempt${value} row\">\n                    <button class=\"number\" id=\"black\">${value}</button>\n                    <buton class=\"colors one\" id=\"white\"></buton>\n                    <buton class=\"colors two\" id=\"white\"></buton>\n                    <buton class=\"colors three\" id=\"white\"></buton>\n                    <buton class=\"colors four\" id=\"white\"></buton>\n                    <div class=\"results${value} square\">\n                        <button class=\"resultsColors one\" id=\"\"></button>\n                        <button class=\"resultsColors two\" id=\"\"></button>\n                        <button class=\"resultsColors three\" id=\"\"></button>\n                        <button class=\"resultsColors four\" id=\"\"></button>\n                    </div>\n                </div>\n            \n            `).join('');\n            document.getElementById(\"attemptsContainer\").innerHTML = attemptsRowHTML;\n    }\n\n    //function for displaying random combination row without colors info for prevent cheating\n    function hiddenCombinationRow(hiddenCombinationLength) {\n        \n        let hiddenCombinationArray = [];\n        for (let i = 1; i <= hiddenCombinationLength; i++) {\n            hiddenCombinationArray.push(i);\n        }\n        let hiddenCombinationHTML = hiddenCombinationArray.map(idx =>\n            `\n            <button class=\"colors place${idx}\" id=\"black\"></button>\n            `).join('');\n            document.getElementById('hiddenCombination').innerHTML = hiddenCombinationHTML;\n    } \n\n    //function for generating and displaying currentAttempt row\n    function currentAttemptDisp(currentAttempt, hiddenCombinationLength) {\n        let currentAttemptArray = [];\n        let currentAttemptTextHTML = '<div class=\"currentText\" id=\"black\">Combinaison en cours</div>'\n        for (let i = 1; i <= hiddenCombinationLength; i++) {\n            currentAttemptArray.push(i);\n        }\n        let currentAttemptColorsHTML = currentAttemptArray.map(value =>`\n        <button class=\"colors\" id=\"white\"></button>\n        `).join('');\n        let currentAttemptHTML= currentAttemptTextHTML.concat(currentAttemptColorsHTML);\n        document.getElementById('currentAttempt').innerHTML = currentAttemptHTML;\n    }\n    colorsButtonCreation(colorsList);\n    attemptsRowsCreation(maxTries, currentAttempt);\n    hiddenCombinationRow(hiddenCombinationLength);\n    currentAttemptDisp(currentAttempt, hiddenCombinationLength);\n}"],"names":["boardCreation","colorsList","maxTries","currentAttempt","hiddenCombinationLength","colorsButtonCreation","colorsButtonHTML","map","color","name","join","document","getElementById","innerHTML","attemptsRowsCreation","i","arrayTries","push","attemptsRowHTML","value","hiddenCombinationRow","hiddenCombinationArray","hiddenCombinationHTML","idx","currentAttemptDisp","currentAttemptArray","currentAttemptTextHTML","currentAttemptColorsHTML","currentAttemptHTML","concat"],"sourceRoot":""}